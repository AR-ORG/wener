加载
链接
	验证 确保加载类的正确性
	准备 为类的静态变量分配内存,并初始化为默认值
	解析 把类中的符号引用转换为直接引用
初始化
	为静态变量赋予正确的初始值
	
类的主动使用, 导致类的初始化
	创建类的实例
	访问静态变量
	调用静态方法
	反射(Class.forName)
	初始化子类
	启动时被标明为启动类的类(例如main所在方法)
	
类的加载
--------
将 .class 文件读入内存,将其放在运行时数据的方法区内.
然后在堆区创建一个 Class 对象,封装类在方法区内的数据结果

加载方式
	本地系统
	网络加载
		java.net.URLClassLoader
	从 zip,jar 等归档文件中加载
	从专有数据库中提取
	将 java 动态编译为 .class
	
堆区
	描述一个类的 Class 对象
方法区
	类的 数据结构

类加载的结果就是在堆区中的 Class 对象

加载器类型
	自带
		Bootstrap 根类加载器(C++)
			无父加载器
			加载 java 的核心库 java.lang.*
			sun.boot.class.path 所指定的目录中加载类库, 没有继承 CLassLoader
		Extension 扩展加载器
			由 java.ext.dir 属性指定的加载路径或者
			jre/lib/ext 中加载
			ClassLoader 的子类
		System 系统类.应用加载器
			父加载器为 扩展加载器
			从 CLASSPATH 变量加载
			或者 java.class.path 属性加载
			它是 ClassLoader 的子类
	自定义
		ClassLoader 的子类
		定制类的加载方法
		默认父加载器为 系统加载器
			创建 类加载器时,如果没有指定加载器, 则会使用 getSystemClassLoader()

		getClassLoader 返回null 代表根类加载器加载, ,处于安全考虑

primitive 类没有类加载器, 使用 Bootstrap 类加载器

不需要等到使用的时候才加载,

JVM 规范运行类加载器在某个类将要被使用的时候预先加载它,
如果预先加载出现错误,则不会报错,而是在首次使用的时候才报错(LinkageError)

如果这个类一直没有被程序主动使用, 则类加载器就不会报错

类的链接
---------
链接就是将读到内存的类的二进制数据合并到虚拟机的运行时环境中去.

验证的内容
	文件结构
	语义
	字节码
	二进制兼容性
		例如 NoSuchMethodError

准备阶段
	给静态变量分配内存,设置初始值
	符号引用替换为直接引用
		例如 `SomeClass#run` 为符号引用
	初始化语句
		静态变量初始方法
			静态变量声明处初始化
			静态代码块中初始化
	

类初始化步骤
	如果类还没有加载和链接, 则先加载和链接
	如果有父类,且父类还没有加载和链接,则对父类执行不适用于接口
		初始化一个接口时,不会先初始化它的父接口
		初始化类时.不会先初始化它所实现的接口
		首次使用特定接口静态变量时才会导致接口的初始化.
		如果不是对当前类的主动使用,也不会初始化当前类
			例如调用父类的静态变量
	如果有初始化语句,则执行初始化语句

编译常量不会导致静态代码块执行,不会导致类被初始化

ClassLoader 的 loadClass 不是对 Class 的主动使用

类加载器的父委托机制,(Parent Delegation)
先让父加载器尝试加载该类,如果加载不了在让子加载器加载
在这一的机制中,除了根类加载器意外, 其他的类加载器有且只有一个
加载失败的时候 ClassNotFountException
例如执行
	java Test
	会抛出该异常

定义类加载器:
	如果某个类加载器能够加载一个类,那么着哦加载器就称作定义加载器;
	定义类加载器及所有子加载器称作初始类加载器.

加载器之间的父子关系实际是加载对象之间的包装关系,而非继承关系.
一对父子加载器可能是同一加载器的两个实例,也可能不是,
在子加载器对象中包装了一个父加载器.

父子委托机制的优点是提高软系统的安全性.
自定义加载器不可能加载由父加载器加载的可靠类,防止不可靠和恶意代码

命名空间由该加载器及所有父加载器的类组成.
在同一个命名空间中不会出现类的完整名字相同的两个类;在

运行时包,由同一个类加载器加载的属于相同包的类组成了运行时包
不同运行时包之间不能直接访问.

创建自定义类加载器需要覆盖 findClass

由不同类加载器加载的类,可以使用反射来操作

一个类何时结束生命周期取决于代表他的的Class对象何时结束生命周期

用户自定义加载器所加载的类是可以卸载的

每个类加载器就相当于一个上下文













